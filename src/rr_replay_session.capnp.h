// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rr_replay_session.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "rr_trace.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9c75879c1f1cabaa);
CAPNP_DECLARE_SCHEMA(9f4a593b40c177be);
CAPNP_DECLARE_SCHEMA(dabfd5d73bba9f1c);
CAPNP_DECLARE_SCHEMA(c33834ac5d76ae44);
CAPNP_DECLARE_SCHEMA(cd06ed9199bc5aa5);
CAPNP_DECLARE_SCHEMA(d04c0b5a7f3af306);
CAPNP_DECLARE_SCHEMA(ccfffda1b0fbaad4);
CAPNP_DECLARE_SCHEMA(b303c2d3a5035e9f);
CAPNP_DECLARE_SCHEMA(e810a37b45a0318a);
CAPNP_DECLARE_SCHEMA(80baebebb38f8bc3);
CAPNP_DECLARE_SCHEMA(bb1a059ecc9073c4);
CAPNP_DECLARE_SCHEMA(aaf7738849d0b916);
CAPNP_DECLARE_SCHEMA(a007e4ddcb39aaa8);
CAPNP_DECLARE_SCHEMA(8440898115460de0);
CAPNP_DECLARE_SCHEMA(b800a269b64d28c3);
CAPNP_DECLARE_SCHEMA(8ca47e54a2089fc8);
CAPNP_DECLARE_SCHEMA(b5816a771b8936c8);
enum class TrappedInstruction_b5816a771b8936c8: uint16_t {
  NONE,
  RDTSC,
  RDTSCP,
  CPUID,
  INT3,
  PUSHF,
  PUSHF16,
};
CAPNP_DECLARE_ENUM(TrappedInstruction, b5816a771b8936c8);
CAPNP_DECLARE_SCHEMA(cc745619109858c2);
CAPNP_DECLARE_SCHEMA(e9f7ba0719c79af6);
CAPNP_DECLARE_SCHEMA(ea2a0590fa7b966d);
CAPNP_DECLARE_SCHEMA(b523ef9a297270c1);
CAPNP_DECLARE_SCHEMA(c724d60732f4c618);
CAPNP_DECLARE_SCHEMA(deeae900a24deee7);
CAPNP_DECLARE_SCHEMA(d8d6f9e887cef105);
CAPNP_DECLARE_SCHEMA(f121d011c7e6a551);

}  // namespace schemas
}  // namespace capnp

namespace rr {
namespace trace {

struct KernelMapping {
  KernelMapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c75879c1f1cabaa, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReplaySession {
  ReplaySession() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f4a593b40c177be, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SysCallBuffer {
  SysCallBuffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dabfd5d73bba9f1c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ThreadGroup {
  ThreadGroup() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c33834ac5d76ae44, 6, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CapturedState {
  CapturedState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct RseqState;
  struct Tguid;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd06ed9199bc5aa5, 17, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CapturedState::RseqState {
  RseqState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d04c0b5a7f3af306, 17, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CapturedState::Tguid {
  Tguid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccfffda1b0fbaad4, 17, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MemoryRange {
  MemoryRange() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b303c2d3a5035e9f, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EmuFile {
  EmuFile() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e810a37b45a0318a, 5, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Mapping {
  Mapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80baebebb38f8bc3, 4, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MemoryMapping {
  MemoryMapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb1a059ecc9073c4, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ShmSegmentSize {
  ShmSegmentSize() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aaf7738849d0b916, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VMem {
  VMem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a007e4ddcb39aaa8, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AddressSpace {
  AddressSpace() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ThreadLocalsTuid;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8440898115460de0, 15, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AddressSpace::ThreadLocalsTuid {
  ThreadLocalsTuid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b800a269b64d28c3, 15, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FdTable {
  FdTable() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ca47e54a2089fc8, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::TrappedInstruction_b5816a771b8936c8 TrappedInstruction;

struct PerfCounters {
  PerfCounters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc745619109858c2, 6, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Task {
  Task() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct RseqState;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9f7ba0719c79af6, 17, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Task::RseqState {
  RseqState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea2a0590fa7b966d, 17, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ClonedFd {
  ClonedFd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b523ef9a297270c1, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CapturedMemory {
  CapturedMemory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c724d60732f4c618, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AddressSpaceClone {
  AddressSpaceClone() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(deeae900a24deee7, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReadersPosition {
  ReadersPosition() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8d6f9e887cef105, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CloneCompletion {
  CloneCompletion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f121d011c7e6a551, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class KernelMapping::Reader {
public:
  typedef KernelMapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMapping() const;
  inline  ::rr::trace::MemoryRange::Reader getMapping() const;

  inline bool hasFsname() const;
  inline  ::capnp::Data::Reader getFsname() const;

  inline  ::uint64_t getDevice() const;

  inline  ::uint64_t getInode() const;

  inline  ::int32_t getProt() const;

  inline  ::int32_t getFlags() const;

  inline  ::uint64_t getOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KernelMapping::Builder {
public:
  typedef KernelMapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMapping();
  inline  ::rr::trace::MemoryRange::Builder getMapping();
  inline void setMapping( ::rr::trace::MemoryRange::Reader value);
  inline  ::rr::trace::MemoryRange::Builder initMapping();
  inline void adoptMapping(::capnp::Orphan< ::rr::trace::MemoryRange>&& value);
  inline ::capnp::Orphan< ::rr::trace::MemoryRange> disownMapping();

  inline bool hasFsname();
  inline  ::capnp::Data::Builder getFsname();
  inline void setFsname( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initFsname(unsigned int size);
  inline void adoptFsname(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownFsname();

  inline  ::uint64_t getDevice();
  inline void setDevice( ::uint64_t value);

  inline  ::uint64_t getInode();
  inline void setInode( ::uint64_t value);

  inline  ::int32_t getProt();
  inline void setProt( ::int32_t value);

  inline  ::int32_t getFlags();
  inline void setFlags( ::int32_t value);

  inline  ::uint64_t getOffset();
  inline void setOffset( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KernelMapping::Pipeline {
public:
  typedef KernelMapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::MemoryRange::Pipeline getMapping();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReplaySession::Reader {
public:
  typedef ReplaySession Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTicksAtStartOfEvent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReplaySession::Builder {
public:
  typedef ReplaySession Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTicksAtStartOfEvent();
  inline void setTicksAtStartOfEvent( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReplaySession::Pipeline {
public:
  typedef ReplaySession Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SysCallBuffer::Reader {
public:
  typedef SysCallBuffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBuffer() const;
  inline  ::capnp::Data::Reader getBuffer() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SysCallBuffer::Builder {
public:
  typedef SysCallBuffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBuffer();
  inline  ::capnp::Data::Builder getBuffer();
  inline void setBuffer( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initBuffer(unsigned int size);
  inline void adoptBuffer(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownBuffer();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SysCallBuffer::Pipeline {
public:
  typedef SysCallBuffer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ThreadGroup::Reader {
public:
  typedef ThreadGroup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTasks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTasks() const;

  inline  ::int32_t getTgid() const;

  inline  ::int32_t getTgidOwnNamespace() const;

  inline  ::int32_t getExitStatus() const;

  inline bool getDumpable() const;

  inline bool getExeced() const;

  inline bool getReceivedSigframeSIGSEGV() const;

  inline  ::uint64_t getParent() const;

  inline bool hasChildren() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getChildren() const;

  inline  ::int64_t getFirstRunEvent() const;

  inline  ::uint32_t getSerial() const;

  inline  ::uint64_t getSelfReferenceValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ThreadGroup::Builder {
public:
  typedef ThreadGroup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTasks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTasks();
  inline void setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTasks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTasks(unsigned int size);
  inline void adoptTasks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTasks();

  inline  ::int32_t getTgid();
  inline void setTgid( ::int32_t value);

  inline  ::int32_t getTgidOwnNamespace();
  inline void setTgidOwnNamespace( ::int32_t value);

  inline  ::int32_t getExitStatus();
  inline void setExitStatus( ::int32_t value);

  inline bool getDumpable();
  inline void setDumpable(bool value);

  inline bool getExeced();
  inline void setExeced(bool value);

  inline bool getReceivedSigframeSIGSEGV();
  inline void setReceivedSigframeSIGSEGV(bool value);

  inline  ::uint64_t getParent();
  inline void setParent( ::uint64_t value);

  inline bool hasChildren();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getChildren();
  inline void setChildren( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setChildren(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initChildren(unsigned int size);
  inline void adoptChildren(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownChildren();

  inline  ::int64_t getFirstRunEvent();
  inline void setFirstRunEvent( ::int64_t value);

  inline  ::uint32_t getSerial();
  inline void setSerial( ::uint32_t value);

  inline  ::uint64_t getSelfReferenceValue();
  inline void setSelfReferenceValue( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ThreadGroup::Pipeline {
public:
  typedef ThreadGroup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CapturedState::Reader {
public:
  typedef CapturedState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTicks() const;

  inline bool hasRegs() const;
  inline  ::rr::trace::Registers::Reader getRegs() const;

  inline bool hasExtraRegs() const;
  inline  ::rr::trace::ExtraRegisters::Reader getExtraRegs() const;

  inline bool hasPrname() const;
  inline  ::capnp::Data::Reader getPrname() const;

  inline  ::uint64_t getFdtableIdentity() const;

  inline  ::uint64_t getSyscallbufChild() const;

  inline  ::uint64_t getSyscallbufSize() const;

  inline  ::uint64_t getNumSyscallbufBytes() const;

  inline  ::uint64_t getPreloadGlobals() const;

  inline  ::uint64_t getScratchPtr() const;

  inline  ::uint64_t getScratchSize() const;

  inline  ::uint64_t getTopOfStack() const;

  inline typename RseqState::Reader getRseqState() const;

  inline  ::uint64_t getClonedFileDataOffset() const;

  inline bool hasThreadLocals() const;
  inline  ::capnp::Data::Reader getThreadLocals() const;

  inline  ::int32_t getRecTid() const;

  inline  ::int32_t getOwnNamespaceRecTid() const;

  inline  ::uint32_t getSerial() const;

  inline typename Tguid::Reader getTguid() const;

  inline  ::int32_t getDeschedFdChild() const;

  inline  ::int32_t getClonedFileDataFdChild() const;

  inline bool hasClonedFileDataFname() const;
  inline  ::capnp::Data::Reader getClonedFileDataFname() const;

  inline  ::int32_t getWaitStatus() const;

  inline  ::uint64_t getTlsRegister() const;

  inline bool hasThreadAreas() const;
  inline  ::capnp::Data::Reader getThreadAreas() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapturedState::Builder {
public:
  typedef CapturedState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getTicks();
  inline void setTicks( ::int64_t value);

  inline bool hasRegs();
  inline  ::rr::trace::Registers::Builder getRegs();
  inline void setRegs( ::rr::trace::Registers::Reader value);
  inline  ::rr::trace::Registers::Builder initRegs();
  inline void adoptRegs(::capnp::Orphan< ::rr::trace::Registers>&& value);
  inline ::capnp::Orphan< ::rr::trace::Registers> disownRegs();

  inline bool hasExtraRegs();
  inline  ::rr::trace::ExtraRegisters::Builder getExtraRegs();
  inline void setExtraRegs( ::rr::trace::ExtraRegisters::Reader value);
  inline  ::rr::trace::ExtraRegisters::Builder initExtraRegs();
  inline void adoptExtraRegs(::capnp::Orphan< ::rr::trace::ExtraRegisters>&& value);
  inline ::capnp::Orphan< ::rr::trace::ExtraRegisters> disownExtraRegs();

  inline bool hasPrname();
  inline  ::capnp::Data::Builder getPrname();
  inline void setPrname( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPrname(unsigned int size);
  inline void adoptPrname(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPrname();

  inline  ::uint64_t getFdtableIdentity();
  inline void setFdtableIdentity( ::uint64_t value);

  inline  ::uint64_t getSyscallbufChild();
  inline void setSyscallbufChild( ::uint64_t value);

  inline  ::uint64_t getSyscallbufSize();
  inline void setSyscallbufSize( ::uint64_t value);

  inline  ::uint64_t getNumSyscallbufBytes();
  inline void setNumSyscallbufBytes( ::uint64_t value);

  inline  ::uint64_t getPreloadGlobals();
  inline void setPreloadGlobals( ::uint64_t value);

  inline  ::uint64_t getScratchPtr();
  inline void setScratchPtr( ::uint64_t value);

  inline  ::uint64_t getScratchSize();
  inline void setScratchSize( ::uint64_t value);

  inline  ::uint64_t getTopOfStack();
  inline void setTopOfStack( ::uint64_t value);

  inline typename RseqState::Builder getRseqState();
  inline typename RseqState::Builder initRseqState();

  inline  ::uint64_t getClonedFileDataOffset();
  inline void setClonedFileDataOffset( ::uint64_t value);

  inline bool hasThreadLocals();
  inline  ::capnp::Data::Builder getThreadLocals();
  inline void setThreadLocals( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initThreadLocals(unsigned int size);
  inline void adoptThreadLocals(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownThreadLocals();

  inline  ::int32_t getRecTid();
  inline void setRecTid( ::int32_t value);

  inline  ::int32_t getOwnNamespaceRecTid();
  inline void setOwnNamespaceRecTid( ::int32_t value);

  inline  ::uint32_t getSerial();
  inline void setSerial( ::uint32_t value);

  inline typename Tguid::Builder getTguid();
  inline typename Tguid::Builder initTguid();

  inline  ::int32_t getDeschedFdChild();
  inline void setDeschedFdChild( ::int32_t value);

  inline  ::int32_t getClonedFileDataFdChild();
  inline void setClonedFileDataFdChild( ::int32_t value);

  inline bool hasClonedFileDataFname();
  inline  ::capnp::Data::Builder getClonedFileDataFname();
  inline void setClonedFileDataFname( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initClonedFileDataFname(unsigned int size);
  inline void adoptClonedFileDataFname(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownClonedFileDataFname();

  inline  ::int32_t getWaitStatus();
  inline void setWaitStatus( ::int32_t value);

  inline  ::uint64_t getTlsRegister();
  inline void setTlsRegister( ::uint64_t value);

  inline bool hasThreadAreas();
  inline  ::capnp::Data::Builder getThreadAreas();
  inline void setThreadAreas( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initThreadAreas(unsigned int size);
  inline void adoptThreadAreas(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownThreadAreas();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapturedState::Pipeline {
public:
  typedef CapturedState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::Registers::Pipeline getRegs();
  inline  ::rr::trace::ExtraRegisters::Pipeline getExtraRegs();
  inline typename RseqState::Pipeline getRseqState();
  inline typename Tguid::Pipeline getTguid();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CapturedState::RseqState::Reader {
public:
  typedef RseqState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr() const;

  inline  ::uint32_t getAbortPrefixSignature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapturedState::RseqState::Builder {
public:
  typedef RseqState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr();
  inline void setPtr( ::uint64_t value);

  inline  ::uint32_t getAbortPrefixSignature();
  inline void setAbortPrefixSignature( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapturedState::RseqState::Pipeline {
public:
  typedef RseqState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CapturedState::Tguid::Reader {
public:
  typedef Tguid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTid() const;

  inline  ::uint32_t getSerial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapturedState::Tguid::Builder {
public:
  typedef Tguid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTid();
  inline void setTid( ::int32_t value);

  inline  ::uint32_t getSerial();
  inline void setSerial( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapturedState::Tguid::Pipeline {
public:
  typedef Tguid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MemoryRange::Reader {
public:
  typedef MemoryRange Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStart() const;

  inline  ::uint64_t getEnd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MemoryRange::Builder {
public:
  typedef MemoryRange Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStart();
  inline void setStart( ::uint64_t value);

  inline  ::uint64_t getEnd();
  inline void setEnd( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MemoryRange::Pipeline {
public:
  typedef MemoryRange Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EmuFile::Reader {
public:
  typedef EmuFile Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasOrigPath() const;
  inline  ::capnp::Data::Reader getOrigPath() const;

  inline bool hasTmpPath() const;
  inline  ::capnp::Data::Reader getTmpPath() const;

  inline  ::int32_t getFile() const;

  inline  ::uint64_t getOwner() const;

  inline  ::uint64_t getSize() const;

  inline  ::uint64_t getDevice() const;

  inline  ::uint64_t getInode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EmuFile::Builder {
public:
  typedef EmuFile Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasOrigPath();
  inline  ::capnp::Data::Builder getOrigPath();
  inline void setOrigPath( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initOrigPath(unsigned int size);
  inline void adoptOrigPath(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownOrigPath();

  inline bool hasTmpPath();
  inline  ::capnp::Data::Builder getTmpPath();
  inline void setTmpPath( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTmpPath(unsigned int size);
  inline void adoptTmpPath(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTmpPath();

  inline  ::int32_t getFile();
  inline void setFile( ::int32_t value);

  inline  ::uint64_t getOwner();
  inline void setOwner( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline  ::uint64_t getDevice();
  inline void setDevice( ::uint64_t value);

  inline  ::uint64_t getInode();
  inline void setInode( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EmuFile::Pipeline {
public:
  typedef EmuFile Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mapping::Reader {
public:
  typedef Mapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMap() const;
  inline  ::rr::trace::KernelMapping::Reader getMap() const;

  inline bool hasRecordedMap() const;
  inline  ::rr::trace::KernelMapping::Reader getRecordedMap() const;

  inline  ::uint64_t getEmuFile() const;

  inline bool hasMappedFileState() const;
  inline  ::capnp::Data::Reader getMappedFileState() const;

  inline  ::uint64_t getLocalAddress() const;

  inline  ::uint64_t getMonitoredSharedMemory() const;

  inline  ::uint32_t getFlags() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mapping::Builder {
public:
  typedef Mapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMap();
  inline  ::rr::trace::KernelMapping::Builder getMap();
  inline void setMap( ::rr::trace::KernelMapping::Reader value);
  inline  ::rr::trace::KernelMapping::Builder initMap();
  inline void adoptMap(::capnp::Orphan< ::rr::trace::KernelMapping>&& value);
  inline ::capnp::Orphan< ::rr::trace::KernelMapping> disownMap();

  inline bool hasRecordedMap();
  inline  ::rr::trace::KernelMapping::Builder getRecordedMap();
  inline void setRecordedMap( ::rr::trace::KernelMapping::Reader value);
  inline  ::rr::trace::KernelMapping::Builder initRecordedMap();
  inline void adoptRecordedMap(::capnp::Orphan< ::rr::trace::KernelMapping>&& value);
  inline ::capnp::Orphan< ::rr::trace::KernelMapping> disownRecordedMap();

  inline  ::uint64_t getEmuFile();
  inline void setEmuFile( ::uint64_t value);

  inline bool hasMappedFileState();
  inline  ::capnp::Data::Builder getMappedFileState();
  inline void setMappedFileState( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initMappedFileState(unsigned int size);
  inline void adoptMappedFileState(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownMappedFileState();

  inline  ::uint64_t getLocalAddress();
  inline void setLocalAddress( ::uint64_t value);

  inline  ::uint64_t getMonitoredSharedMemory();
  inline void setMonitoredSharedMemory( ::uint64_t value);

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mapping::Pipeline {
public:
  typedef Mapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::KernelMapping::Pipeline getMap();
  inline  ::rr::trace::KernelMapping::Pipeline getRecordedMap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MemoryMapping::Reader {
public:
  typedef MemoryMapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMemoryRange() const;
  inline  ::rr::trace::MemoryRange::Reader getMemoryRange() const;

  inline bool hasMapping() const;
  inline  ::rr::trace::Mapping::Reader getMapping() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MemoryMapping::Builder {
public:
  typedef MemoryMapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMemoryRange();
  inline  ::rr::trace::MemoryRange::Builder getMemoryRange();
  inline void setMemoryRange( ::rr::trace::MemoryRange::Reader value);
  inline  ::rr::trace::MemoryRange::Builder initMemoryRange();
  inline void adoptMemoryRange(::capnp::Orphan< ::rr::trace::MemoryRange>&& value);
  inline ::capnp::Orphan< ::rr::trace::MemoryRange> disownMemoryRange();

  inline bool hasMapping();
  inline  ::rr::trace::Mapping::Builder getMapping();
  inline void setMapping( ::rr::trace::Mapping::Reader value);
  inline  ::rr::trace::Mapping::Builder initMapping();
  inline void adoptMapping(::capnp::Orphan< ::rr::trace::Mapping>&& value);
  inline ::capnp::Orphan< ::rr::trace::Mapping> disownMapping();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MemoryMapping::Pipeline {
public:
  typedef MemoryMapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::MemoryRange::Pipeline getMemoryRange();
  inline  ::rr::trace::Mapping::Pipeline getMapping();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ShmSegmentSize::Reader {
public:
  typedef ShmSegmentSize Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getAddress() const;

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ShmSegmentSize::Builder {
public:
  typedef ShmSegmentSize Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getAddress();
  inline void setAddress( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ShmSegmentSize::Pipeline {
public:
  typedef ShmSegmentSize Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VMem::Reader {
public:
  typedef VMem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStart() const;

  inline  ::uint64_t getEnd() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VMem::Builder {
public:
  typedef VMem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getStart();
  inline void setStart( ::uint64_t value);

  inline  ::uint64_t getEnd();
  inline void setEnd( ::uint64_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VMem::Pipeline {
public:
  typedef VMem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AddressSpace::Reader {
public:
  typedef AddressSpace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getBreakpoints() const;

  inline bool hasExe() const;
  inline  ::capnp::Data::Reader getExe() const;

  inline  ::int32_t getLeaderTid() const;

  inline  ::uint32_t getLeaderSerial() const;

  inline  ::uint32_t getExecCount() const;

  inline  ::uint64_t getBrkStart() const;

  inline  ::uint64_t getBrkEnd() const;

  inline bool hasMem() const;
  inline  ::rr::trace::MemoryMapping::Reader getMem() const;

  inline bool hasShmSizes() const;
  inline  ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Reader getShmSizes() const;

  inline bool hasMonitoredMem() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getMonitoredMem() const;

  inline bool hasDontFork() const;
  inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader getDontFork() const;

  inline bool hasWipeOnFork() const;
  inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader getWipeOnFork() const;

  inline typename ThreadLocalsTuid::Reader getThreadLocalsTuid() const;

  inline  ::uint64_t getVdsoStartAddr() const;

  inline  ::int32_t getWatchpoints() const;

  inline  ::int32_t getSavedWatchpoints() const;

  inline  ::int32_t getChildMemFd() const;

  inline  ::uint64_t getTracedSyscalIp() const;

  inline  ::uint64_t getPrivilegedTracedSyscallIp() const;

  inline bool getSycallbufEnabled() const;

  inline  ::uint64_t getDoBreakpointFaultAddr() const;

  inline  ::uint64_t getStoppingBreakpointTable() const;

  inline  ::int32_t getStoppingBreakpointTableEntrySize() const;

  inline bool hasSavedAuxv() const;
  inline  ::capnp::Data::Reader getSavedAuxv() const;

  inline  ::uint64_t getSavedInterpreterBase() const;

  inline bool hasSavedLdPath() const;
  inline  ::capnp::Data::Reader getSavedLdPath() const;

  inline  ::int64_t getFirstRunEvent() const;

  inline bool hasStapSemaphores() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getStapSemaphores() const;

  inline bool hasPrname() const;
  inline  ::capnp::Data::Reader getPrname() const;

  inline bool hasTasks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTasks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AddressSpace::Builder {
public:
  typedef AddressSpace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getBreakpoints();
  inline void setBreakpoints( ::int32_t value);

  inline bool hasExe();
  inline  ::capnp::Data::Builder getExe();
  inline void setExe( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initExe(unsigned int size);
  inline void adoptExe(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownExe();

  inline  ::int32_t getLeaderTid();
  inline void setLeaderTid( ::int32_t value);

  inline  ::uint32_t getLeaderSerial();
  inline void setLeaderSerial( ::uint32_t value);

  inline  ::uint32_t getExecCount();
  inline void setExecCount( ::uint32_t value);

  inline  ::uint64_t getBrkStart();
  inline void setBrkStart( ::uint64_t value);

  inline  ::uint64_t getBrkEnd();
  inline void setBrkEnd( ::uint64_t value);

  inline bool hasMem();
  inline  ::rr::trace::MemoryMapping::Builder getMem();
  inline void setMem( ::rr::trace::MemoryMapping::Reader value);
  inline  ::rr::trace::MemoryMapping::Builder initMem();
  inline void adoptMem(::capnp::Orphan< ::rr::trace::MemoryMapping>&& value);
  inline ::capnp::Orphan< ::rr::trace::MemoryMapping> disownMem();

  inline bool hasShmSizes();
  inline  ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Builder getShmSizes();
  inline void setShmSizes( ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Builder initShmSizes(unsigned int size);
  inline void adoptShmSizes(::capnp::Orphan< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>> disownShmSizes();

  inline bool hasMonitoredMem();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getMonitoredMem();
  inline void setMonitoredMem( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMonitoredMem(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initMonitoredMem(unsigned int size);
  inline void adoptMonitoredMem(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownMonitoredMem();

  inline bool hasDontFork();
  inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder getDontFork();
  inline void setDontFork( ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder initDontFork(unsigned int size);
  inline void adoptDontFork(::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>> disownDontFork();

  inline bool hasWipeOnFork();
  inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder getWipeOnFork();
  inline void setWipeOnFork( ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder initWipeOnFork(unsigned int size);
  inline void adoptWipeOnFork(::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>> disownWipeOnFork();

  inline typename ThreadLocalsTuid::Builder getThreadLocalsTuid();
  inline typename ThreadLocalsTuid::Builder initThreadLocalsTuid();

  inline  ::uint64_t getVdsoStartAddr();
  inline void setVdsoStartAddr( ::uint64_t value);

  inline  ::int32_t getWatchpoints();
  inline void setWatchpoints( ::int32_t value);

  inline  ::int32_t getSavedWatchpoints();
  inline void setSavedWatchpoints( ::int32_t value);

  inline  ::int32_t getChildMemFd();
  inline void setChildMemFd( ::int32_t value);

  inline  ::uint64_t getTracedSyscalIp();
  inline void setTracedSyscalIp( ::uint64_t value);

  inline  ::uint64_t getPrivilegedTracedSyscallIp();
  inline void setPrivilegedTracedSyscallIp( ::uint64_t value);

  inline bool getSycallbufEnabled();
  inline void setSycallbufEnabled(bool value);

  inline  ::uint64_t getDoBreakpointFaultAddr();
  inline void setDoBreakpointFaultAddr( ::uint64_t value);

  inline  ::uint64_t getStoppingBreakpointTable();
  inline void setStoppingBreakpointTable( ::uint64_t value);

  inline  ::int32_t getStoppingBreakpointTableEntrySize();
  inline void setStoppingBreakpointTableEntrySize( ::int32_t value);

  inline bool hasSavedAuxv();
  inline  ::capnp::Data::Builder getSavedAuxv();
  inline void setSavedAuxv( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSavedAuxv(unsigned int size);
  inline void adoptSavedAuxv(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSavedAuxv();

  inline  ::uint64_t getSavedInterpreterBase();
  inline void setSavedInterpreterBase( ::uint64_t value);

  inline bool hasSavedLdPath();
  inline  ::capnp::Data::Builder getSavedLdPath();
  inline void setSavedLdPath( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSavedLdPath(unsigned int size);
  inline void adoptSavedLdPath(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSavedLdPath();

  inline  ::int64_t getFirstRunEvent();
  inline void setFirstRunEvent( ::int64_t value);

  inline bool hasStapSemaphores();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getStapSemaphores();
  inline void setStapSemaphores( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStapSemaphores(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initStapSemaphores(unsigned int size);
  inline void adoptStapSemaphores(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownStapSemaphores();

  inline bool hasPrname();
  inline  ::capnp::Data::Builder getPrname();
  inline void setPrname( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPrname(unsigned int size);
  inline void adoptPrname(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPrname();

  inline bool hasTasks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTasks();
  inline void setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTasks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTasks(unsigned int size);
  inline void adoptTasks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTasks();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AddressSpace::Pipeline {
public:
  typedef AddressSpace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::MemoryMapping::Pipeline getMem();
  inline typename ThreadLocalsTuid::Pipeline getThreadLocalsTuid();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AddressSpace::ThreadLocalsTuid::Reader {
public:
  typedef ThreadLocalsTuid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid() const;

  inline  ::uint32_t getSerial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AddressSpace::ThreadLocalsTuid::Builder {
public:
  typedef ThreadLocalsTuid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

  inline  ::uint32_t getSerial();
  inline void setSerial( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AddressSpace::ThreadLocalsTuid::Pipeline {
public:
  typedef ThreadLocalsTuid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FdTable::Reader {
public:
  typedef FdTable Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFds() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getFds() const;

  inline  ::int32_t getFdCountBeyondLimit() const;

  inline bool hasTasks() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTasks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FdTable::Builder {
public:
  typedef FdTable Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFds();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getFds();
  inline void setFds( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFds(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initFds(unsigned int size);
  inline void adoptFds(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownFds();

  inline  ::int32_t getFdCountBeyondLimit();
  inline void setFdCountBeyondLimit( ::int32_t value);

  inline bool hasTasks();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTasks();
  inline void setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTasks(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTasks(unsigned int size);
  inline void adoptTasks(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTasks();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FdTable::Pipeline {
public:
  typedef FdTable Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PerfCounters::Reader {
public:
  typedef PerfCounters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCountingPeriod() const;

  inline  ::int32_t getTid() const;

  inline  ::int32_t getPmuIndex() const;

  inline  ::int32_t getFdTicksMeasure() const;

  inline  ::int32_t getFdMinusTicksMeasure() const;

  inline  ::int32_t getFdTicksInterrupt() const;

  inline  ::int32_t getFdUselessCounter() const;

  inline  ::int32_t getFdTicksInTransaction() const;

  inline  ::int32_t getFdStretchCounter() const;

  inline  ::rr::trace::TicksSemantics getTicksSemantics() const;

  inline bool getStart() const;

  inline bool getCounting() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PerfCounters::Builder {
public:
  typedef PerfCounters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getCountingPeriod();
  inline void setCountingPeriod( ::int64_t value);

  inline  ::int32_t getTid();
  inline void setTid( ::int32_t value);

  inline  ::int32_t getPmuIndex();
  inline void setPmuIndex( ::int32_t value);

  inline  ::int32_t getFdTicksMeasure();
  inline void setFdTicksMeasure( ::int32_t value);

  inline  ::int32_t getFdMinusTicksMeasure();
  inline void setFdMinusTicksMeasure( ::int32_t value);

  inline  ::int32_t getFdTicksInterrupt();
  inline void setFdTicksInterrupt( ::int32_t value);

  inline  ::int32_t getFdUselessCounter();
  inline void setFdUselessCounter( ::int32_t value);

  inline  ::int32_t getFdTicksInTransaction();
  inline void setFdTicksInTransaction( ::int32_t value);

  inline  ::int32_t getFdStretchCounter();
  inline void setFdStretchCounter( ::int32_t value);

  inline  ::rr::trace::TicksSemantics getTicksSemantics();
  inline void setTicksSemantics( ::rr::trace::TicksSemantics value);

  inline bool getStart();
  inline void setStart(bool value);

  inline bool getCounting();
  inline void setCounting(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PerfCounters::Pipeline {
public:
  typedef PerfCounters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Task::Reader {
public:
  typedef Task Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getScratchPtr() const;

  inline  ::uint64_t getScratchSize() const;

  inline  ::int32_t getDeschedFdChild() const;

  inline  ::int32_t getClonedFileDataFdChild() const;

  inline bool hasClonedFileDataFname() const;
  inline  ::capnp::Data::Reader getClonedFileDataFname() const;

  inline typename RseqState::Reader getRseqState() const;

  inline bool hasHpc() const;
  inline  ::rr::trace::PerfCounters::Reader getHpc() const;

  inline  ::int32_t getTid() const;

  inline  ::int32_t getRecTid() const;

  inline  ::int32_t getOwnNamespaceRecTid() const;

  inline  ::uint64_t getSyscallbufSize() const;

  inline  ::uint64_t getSyscallbufChild() const;

  inline  ::uint64_t getPreloadGlobals() const;

  inline bool hasThreadLocals() const;
  inline  ::capnp::Data::Reader getThreadLocals() const;

  inline  ::uint32_t getSerial() const;

  inline bool hasAs() const;
  inline  ::rr::trace::AddressSpace::Reader getAs() const;

  inline bool hasFds() const;
  inline  ::rr::trace::FdTable::Reader getFds() const;

  inline bool hasPrname() const;
  inline  ::capnp::Data::Reader getPrname() const;

  inline  ::int64_t getTicks() const;

  inline bool hasRegisters() const;
  inline  ::rr::trace::Registers::Reader getRegisters() const;

  inline  ::uint64_t getAddressOfLastExecutionResume() const;

  inline  ::int32_t getHowLastExecutionResumed() const;

  inline  ::uint64_t getLastResumeOrigCx() const;

  inline  ::rr::trace::TrappedInstruction getSinglesteppingInstruction() const;

  inline bool getDidSetBreakpointAfterCpuid() const;

  inline bool getIsStopped() const;

  inline bool getSeccompBpfEnabled() const;

  inline bool getDetectedUnexpectedExit() const;

  inline bool getRegistersDirty() const;

  inline bool getOrigSyscallnoDirty() const;

  inline bool hasExtraRegisters() const;
  inline  ::rr::trace::ExtraRegisters::Reader getExtraRegisters() const;

  inline bool getExtraRegistersKnown() const;

  inline bool hasTg() const;
  inline  ::rr::trace::ThreadGroup::Reader getTg() const;

  inline bool hasThreadAreas() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getThreadAreas() const;

  inline  ::uint64_t getTopOfStack() const;

  inline  ::int32_t getWaitStatus() const;

  inline bool hasPendingSiginfo() const;
  inline  ::capnp::Data::Reader getPendingSiginfo() const;

  inline bool getSeenPtraceExitEvent() const;

  inline bool getHandledPtraceExitEvent() const;

  inline  ::int32_t getExpectingPtraceInterruptStop() const;

  inline bool getWasReaped() const;

  inline bool getForgotten() const;

  inline  ::uint64_t getSelfReferenceValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Task::Builder {
public:
  typedef Task Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getScratchPtr();
  inline void setScratchPtr( ::uint64_t value);

  inline  ::uint64_t getScratchSize();
  inline void setScratchSize( ::uint64_t value);

  inline  ::int32_t getDeschedFdChild();
  inline void setDeschedFdChild( ::int32_t value);

  inline  ::int32_t getClonedFileDataFdChild();
  inline void setClonedFileDataFdChild( ::int32_t value);

  inline bool hasClonedFileDataFname();
  inline  ::capnp::Data::Builder getClonedFileDataFname();
  inline void setClonedFileDataFname( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initClonedFileDataFname(unsigned int size);
  inline void adoptClonedFileDataFname(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownClonedFileDataFname();

  inline typename RseqState::Builder getRseqState();
  inline typename RseqState::Builder initRseqState();

  inline bool hasHpc();
  inline  ::rr::trace::PerfCounters::Builder getHpc();
  inline void setHpc( ::rr::trace::PerfCounters::Reader value);
  inline  ::rr::trace::PerfCounters::Builder initHpc();
  inline void adoptHpc(::capnp::Orphan< ::rr::trace::PerfCounters>&& value);
  inline ::capnp::Orphan< ::rr::trace::PerfCounters> disownHpc();

  inline  ::int32_t getTid();
  inline void setTid( ::int32_t value);

  inline  ::int32_t getRecTid();
  inline void setRecTid( ::int32_t value);

  inline  ::int32_t getOwnNamespaceRecTid();
  inline void setOwnNamespaceRecTid( ::int32_t value);

  inline  ::uint64_t getSyscallbufSize();
  inline void setSyscallbufSize( ::uint64_t value);

  inline  ::uint64_t getSyscallbufChild();
  inline void setSyscallbufChild( ::uint64_t value);

  inline  ::uint64_t getPreloadGlobals();
  inline void setPreloadGlobals( ::uint64_t value);

  inline bool hasThreadLocals();
  inline  ::capnp::Data::Builder getThreadLocals();
  inline void setThreadLocals( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initThreadLocals(unsigned int size);
  inline void adoptThreadLocals(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownThreadLocals();

  inline  ::uint32_t getSerial();
  inline void setSerial( ::uint32_t value);

  inline bool hasAs();
  inline  ::rr::trace::AddressSpace::Builder getAs();
  inline void setAs( ::rr::trace::AddressSpace::Reader value);
  inline  ::rr::trace::AddressSpace::Builder initAs();
  inline void adoptAs(::capnp::Orphan< ::rr::trace::AddressSpace>&& value);
  inline ::capnp::Orphan< ::rr::trace::AddressSpace> disownAs();

  inline bool hasFds();
  inline  ::rr::trace::FdTable::Builder getFds();
  inline void setFds( ::rr::trace::FdTable::Reader value);
  inline  ::rr::trace::FdTable::Builder initFds();
  inline void adoptFds(::capnp::Orphan< ::rr::trace::FdTable>&& value);
  inline ::capnp::Orphan< ::rr::trace::FdTable> disownFds();

  inline bool hasPrname();
  inline  ::capnp::Data::Builder getPrname();
  inline void setPrname( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPrname(unsigned int size);
  inline void adoptPrname(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPrname();

  inline  ::int64_t getTicks();
  inline void setTicks( ::int64_t value);

  inline bool hasRegisters();
  inline  ::rr::trace::Registers::Builder getRegisters();
  inline void setRegisters( ::rr::trace::Registers::Reader value);
  inline  ::rr::trace::Registers::Builder initRegisters();
  inline void adoptRegisters(::capnp::Orphan< ::rr::trace::Registers>&& value);
  inline ::capnp::Orphan< ::rr::trace::Registers> disownRegisters();

  inline  ::uint64_t getAddressOfLastExecutionResume();
  inline void setAddressOfLastExecutionResume( ::uint64_t value);

  inline  ::int32_t getHowLastExecutionResumed();
  inline void setHowLastExecutionResumed( ::int32_t value);

  inline  ::uint64_t getLastResumeOrigCx();
  inline void setLastResumeOrigCx( ::uint64_t value);

  inline  ::rr::trace::TrappedInstruction getSinglesteppingInstruction();
  inline void setSinglesteppingInstruction( ::rr::trace::TrappedInstruction value);

  inline bool getDidSetBreakpointAfterCpuid();
  inline void setDidSetBreakpointAfterCpuid(bool value);

  inline bool getIsStopped();
  inline void setIsStopped(bool value);

  inline bool getSeccompBpfEnabled();
  inline void setSeccompBpfEnabled(bool value);

  inline bool getDetectedUnexpectedExit();
  inline void setDetectedUnexpectedExit(bool value);

  inline bool getRegistersDirty();
  inline void setRegistersDirty(bool value);

  inline bool getOrigSyscallnoDirty();
  inline void setOrigSyscallnoDirty(bool value);

  inline bool hasExtraRegisters();
  inline  ::rr::trace::ExtraRegisters::Builder getExtraRegisters();
  inline void setExtraRegisters( ::rr::trace::ExtraRegisters::Reader value);
  inline  ::rr::trace::ExtraRegisters::Builder initExtraRegisters();
  inline void adoptExtraRegisters(::capnp::Orphan< ::rr::trace::ExtraRegisters>&& value);
  inline ::capnp::Orphan< ::rr::trace::ExtraRegisters> disownExtraRegisters();

  inline bool getExtraRegistersKnown();
  inline void setExtraRegistersKnown(bool value);

  inline bool hasTg();
  inline  ::rr::trace::ThreadGroup::Builder getTg();
  inline void setTg( ::rr::trace::ThreadGroup::Reader value);
  inline  ::rr::trace::ThreadGroup::Builder initTg();
  inline void adoptTg(::capnp::Orphan< ::rr::trace::ThreadGroup>&& value);
  inline ::capnp::Orphan< ::rr::trace::ThreadGroup> disownTg();

  inline bool hasThreadAreas();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getThreadAreas();
  inline void setThreadAreas( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setThreadAreas(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initThreadAreas(unsigned int size);
  inline void adoptThreadAreas(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownThreadAreas();

  inline  ::uint64_t getTopOfStack();
  inline void setTopOfStack( ::uint64_t value);

  inline  ::int32_t getWaitStatus();
  inline void setWaitStatus( ::int32_t value);

  inline bool hasPendingSiginfo();
  inline  ::capnp::Data::Builder getPendingSiginfo();
  inline void setPendingSiginfo( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPendingSiginfo(unsigned int size);
  inline void adoptPendingSiginfo(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPendingSiginfo();

  inline bool getSeenPtraceExitEvent();
  inline void setSeenPtraceExitEvent(bool value);

  inline bool getHandledPtraceExitEvent();
  inline void setHandledPtraceExitEvent(bool value);

  inline  ::int32_t getExpectingPtraceInterruptStop();
  inline void setExpectingPtraceInterruptStop( ::int32_t value);

  inline bool getWasReaped();
  inline void setWasReaped(bool value);

  inline bool getForgotten();
  inline void setForgotten(bool value);

  inline  ::uint64_t getSelfReferenceValue();
  inline void setSelfReferenceValue( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Task::Pipeline {
public:
  typedef Task Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename RseqState::Pipeline getRseqState();
  inline  ::rr::trace::PerfCounters::Pipeline getHpc();
  inline  ::rr::trace::AddressSpace::Pipeline getAs();
  inline  ::rr::trace::FdTable::Pipeline getFds();
  inline  ::rr::trace::Registers::Pipeline getRegisters();
  inline  ::rr::trace::ExtraRegisters::Pipeline getExtraRegisters();
  inline  ::rr::trace::ThreadGroup::Pipeline getTg();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Task::RseqState::Reader {
public:
  typedef RseqState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr() const;

  inline  ::uint32_t getAbortPrefixSignature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Task::RseqState::Builder {
public:
  typedef RseqState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr();
  inline void setPtr( ::uint64_t value);

  inline  ::uint32_t getAbortPrefixSignature();
  inline void setAbortPrefixSignature( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Task::RseqState::Pipeline {
public:
  typedef RseqState Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ClonedFd::Reader {
public:
  typedef ClonedFd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr() const;

  inline bool hasFdTablePtr() const;
  inline  ::rr::trace::FdTable::Reader getFdTablePtr() const;

  inline bool hasTaskSet() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getTaskSet() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClonedFd::Builder {
public:
  typedef ClonedFd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr();
  inline void setPtr( ::uint64_t value);

  inline bool hasFdTablePtr();
  inline  ::rr::trace::FdTable::Builder getFdTablePtr();
  inline void setFdTablePtr( ::rr::trace::FdTable::Reader value);
  inline  ::rr::trace::FdTable::Builder initFdTablePtr();
  inline void adoptFdTablePtr(::capnp::Orphan< ::rr::trace::FdTable>&& value);
  inline ::capnp::Orphan< ::rr::trace::FdTable> disownFdTablePtr();

  inline bool hasTaskSet();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getTaskSet();
  inline void setTaskSet( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTaskSet(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initTaskSet(unsigned int size);
  inline void adoptTaskSet(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownTaskSet();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClonedFd::Pipeline {
public:
  typedef ClonedFd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::FdTable::Pipeline getFdTablePtr();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CapturedMemory::Reader {
public:
  typedef CapturedMemory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr() const;

  inline bool hasBuf() const;
  inline  ::capnp::Data::Reader getBuf() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CapturedMemory::Builder {
public:
  typedef CapturedMemory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getPtr();
  inline void setPtr( ::uint64_t value);

  inline bool hasBuf();
  inline  ::capnp::Data::Builder getBuf();
  inline void setBuf( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initBuf(unsigned int size);
  inline void adoptBuf(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownBuf();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CapturedMemory::Pipeline {
public:
  typedef CapturedMemory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AddressSpaceClone::Reader {
public:
  typedef AddressSpaceClone Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCloneLeader() const;

  inline bool hasCloneLeaderState() const;
  inline  ::rr::trace::CapturedState::Reader getCloneLeaderState() const;

  inline bool hasMemberStates() const;
  inline  ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Reader getMemberStates() const;

  inline bool hasCapturedMemory() const;
  inline  ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Reader getCapturedMemory() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AddressSpaceClone::Builder {
public:
  typedef AddressSpaceClone Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getCloneLeader();
  inline void setCloneLeader( ::uint64_t value);

  inline bool hasCloneLeaderState();
  inline  ::rr::trace::CapturedState::Builder getCloneLeaderState();
  inline void setCloneLeaderState( ::rr::trace::CapturedState::Reader value);
  inline  ::rr::trace::CapturedState::Builder initCloneLeaderState();
  inline void adoptCloneLeaderState(::capnp::Orphan< ::rr::trace::CapturedState>&& value);
  inline ::capnp::Orphan< ::rr::trace::CapturedState> disownCloneLeaderState();

  inline bool hasMemberStates();
  inline  ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Builder getMemberStates();
  inline void setMemberStates( ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Builder initMemberStates(unsigned int size);
  inline void adoptMemberStates(::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>> disownMemberStates();

  inline bool hasCapturedMemory();
  inline  ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Builder getCapturedMemory();
  inline void setCapturedMemory( ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Builder initCapturedMemory(unsigned int size);
  inline void adoptCapturedMemory(::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>> disownCapturedMemory();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AddressSpaceClone::Pipeline {
public:
  typedef AddressSpaceClone Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::CapturedState::Pipeline getCloneLeaderState();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReadersPosition::Reader {
public:
  typedef ReadersPosition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getEvents() const;

  inline  ::uint64_t getRawData() const;

  inline  ::uint64_t getMmaps() const;

  inline  ::uint64_t getTasks() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReadersPosition::Builder {
public:
  typedef ReadersPosition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getEvents();
  inline void setEvents( ::uint64_t value);

  inline  ::uint64_t getRawData();
  inline void setRawData( ::uint64_t value);

  inline  ::uint64_t getMmaps();
  inline void setMmaps( ::uint64_t value);

  inline  ::uint64_t getTasks();
  inline void setTasks( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReadersPosition::Pipeline {
public:
  typedef ReadersPosition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CloneCompletion::Reader {
public:
  typedef CloneCompletion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAddressSpaces() const;
  inline  ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Reader getAddressSpaces() const;

  inline bool hasClonedFdTables() const;
  inline  ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Reader getClonedFdTables() const;

  inline bool hasReadersPosition() const;
  inline  ::rr::trace::ReadersPosition::Reader getReadersPosition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CloneCompletion::Builder {
public:
  typedef CloneCompletion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAddressSpaces();
  inline  ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Builder getAddressSpaces();
  inline void setAddressSpaces( ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Builder initAddressSpaces(unsigned int size);
  inline void adoptAddressSpaces(::capnp::Orphan< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>> disownAddressSpaces();

  inline bool hasClonedFdTables();
  inline  ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Builder getClonedFdTables();
  inline void setClonedFdTables( ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Builder initClonedFdTables(unsigned int size);
  inline void adoptClonedFdTables(::capnp::Orphan< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>> disownClonedFdTables();

  inline bool hasReadersPosition();
  inline  ::rr::trace::ReadersPosition::Builder getReadersPosition();
  inline void setReadersPosition( ::rr::trace::ReadersPosition::Reader value);
  inline  ::rr::trace::ReadersPosition::Builder initReadersPosition();
  inline void adoptReadersPosition(::capnp::Orphan< ::rr::trace::ReadersPosition>&& value);
  inline ::capnp::Orphan< ::rr::trace::ReadersPosition> disownReadersPosition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CloneCompletion::Pipeline {
public:
  typedef CloneCompletion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rr::trace::ReadersPosition::Pipeline getReadersPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool KernelMapping::Reader::hasMapping() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool KernelMapping::Builder::hasMapping() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::MemoryRange::Reader KernelMapping::Reader::getMapping() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::rr::trace::MemoryRange::Builder KernelMapping::Builder::getMapping() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::MemoryRange::Pipeline KernelMapping::Pipeline::getMapping() {
  return  ::rr::trace::MemoryRange::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void KernelMapping::Builder::setMapping( ::rr::trace::MemoryRange::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::MemoryRange::Builder KernelMapping::Builder::initMapping() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KernelMapping::Builder::adoptMapping(
    ::capnp::Orphan< ::rr::trace::MemoryRange>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::MemoryRange> KernelMapping::Builder::disownMapping() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool KernelMapping::Reader::hasFsname() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool KernelMapping::Builder::hasFsname() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader KernelMapping::Reader::getFsname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder KernelMapping::Builder::getFsname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void KernelMapping::Builder::setFsname( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder KernelMapping::Builder::initFsname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void KernelMapping::Builder::adoptFsname(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> KernelMapping::Builder::disownFsname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t KernelMapping::Reader::getDevice() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t KernelMapping::Builder::getDevice() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void KernelMapping::Builder::setDevice( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t KernelMapping::Reader::getInode() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t KernelMapping::Builder::getInode() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void KernelMapping::Builder::setInode( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t KernelMapping::Reader::getProt() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t KernelMapping::Builder::getProt() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void KernelMapping::Builder::setProt( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t KernelMapping::Reader::getFlags() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t KernelMapping::Builder::getFlags() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void KernelMapping::Builder::setFlags( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t KernelMapping::Reader::getOffset() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t KernelMapping::Builder::getOffset() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void KernelMapping::Builder::setOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ReplaySession::Reader::getTicksAtStartOfEvent() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ReplaySession::Builder::getTicksAtStartOfEvent() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReplaySession::Builder::setTicksAtStartOfEvent( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SysCallBuffer::Reader::hasBuffer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SysCallBuffer::Builder::hasBuffer() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SysCallBuffer::Reader::getBuffer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SysCallBuffer::Builder::getBuffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SysCallBuffer::Builder::setBuffer( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SysCallBuffer::Builder::initBuffer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SysCallBuffer::Builder::adoptBuffer(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SysCallBuffer::Builder::disownBuffer() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ThreadGroup::Reader::hasTasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ThreadGroup::Builder::hasTasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader ThreadGroup::Reader::getTasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ThreadGroup::Builder::getTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ThreadGroup::Builder::setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ThreadGroup::Builder::setTasks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ThreadGroup::Builder::initTasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ThreadGroup::Builder::adoptTasks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> ThreadGroup::Builder::disownTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t ThreadGroup::Reader::getTgid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ThreadGroup::Builder::getTgid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setTgid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ThreadGroup::Reader::getTgidOwnNamespace() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ThreadGroup::Builder::getTgidOwnNamespace() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setTgidOwnNamespace( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ThreadGroup::Reader::getExitStatus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ThreadGroup::Builder::getExitStatus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setExitStatus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ThreadGroup::Reader::getDumpable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool ThreadGroup::Builder::getDumpable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setDumpable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool ThreadGroup::Reader::getExeced() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool ThreadGroup::Builder::getExeced() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setExeced(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool ThreadGroup::Reader::getReceivedSigframeSIGSEGV() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline bool ThreadGroup::Builder::getReceivedSigframeSIGSEGV() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setReceivedSigframeSIGSEGV(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ThreadGroup::Reader::getParent() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ThreadGroup::Builder::getParent() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setParent( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ThreadGroup::Reader::hasChildren() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ThreadGroup::Builder::hasChildren() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader ThreadGroup::Reader::getChildren() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ThreadGroup::Builder::getChildren() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ThreadGroup::Builder::setChildren( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ThreadGroup::Builder::setChildren(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ThreadGroup::Builder::initChildren(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ThreadGroup::Builder::adoptChildren(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> ThreadGroup::Builder::disownChildren() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int64_t ThreadGroup::Reader::getFirstRunEvent() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ThreadGroup::Builder::getFirstRunEvent() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setFirstRunEvent( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ThreadGroup::Reader::getSerial() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ThreadGroup::Builder::getSerial() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setSerial( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ThreadGroup::Reader::getSelfReferenceValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ThreadGroup::Builder::getSelfReferenceValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ThreadGroup::Builder::setSelfReferenceValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t CapturedState::Reader::getTicks() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t CapturedState::Builder::getTicks() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setTicks( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CapturedState::Reader::hasRegs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CapturedState::Builder::hasRegs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::Registers::Reader CapturedState::Reader::getRegs() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::rr::trace::Registers::Builder CapturedState::Builder::getRegs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::Registers::Pipeline CapturedState::Pipeline::getRegs() {
  return  ::rr::trace::Registers::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CapturedState::Builder::setRegs( ::rr::trace::Registers::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::Registers>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::Registers::Builder CapturedState::Builder::initRegs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CapturedState::Builder::adoptRegs(
    ::capnp::Orphan< ::rr::trace::Registers>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::Registers>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::Registers> CapturedState::Builder::disownRegs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CapturedState::Reader::hasExtraRegs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CapturedState::Builder::hasExtraRegs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::ExtraRegisters::Reader CapturedState::Reader::getExtraRegs() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::rr::trace::ExtraRegisters::Builder CapturedState::Builder::getExtraRegs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::ExtraRegisters::Pipeline CapturedState::Pipeline::getExtraRegs() {
  return  ::rr::trace::ExtraRegisters::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CapturedState::Builder::setExtraRegs( ::rr::trace::ExtraRegisters::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::ExtraRegisters::Builder CapturedState::Builder::initExtraRegs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CapturedState::Builder::adoptExtraRegs(
    ::capnp::Orphan< ::rr::trace::ExtraRegisters>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::ExtraRegisters> CapturedState::Builder::disownExtraRegs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CapturedState::Reader::hasPrname() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CapturedState::Builder::hasPrname() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CapturedState::Reader::getPrname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CapturedState::Builder::getPrname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CapturedState::Builder::setPrname( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CapturedState::Builder::initPrname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CapturedState::Builder::adoptPrname(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CapturedState::Builder::disownPrname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t CapturedState::Reader::getFdtableIdentity() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getFdtableIdentity() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setFdtableIdentity( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getSyscallbufChild() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getSyscallbufChild() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setSyscallbufChild( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getSyscallbufSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getSyscallbufSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setSyscallbufSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getNumSyscallbufBytes() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getNumSyscallbufBytes() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setNumSyscallbufBytes( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getPreloadGlobals() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getPreloadGlobals() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setPreloadGlobals( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getScratchPtr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getScratchPtr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setScratchPtr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getScratchSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getScratchSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setScratchSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getTopOfStack() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getTopOfStack() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setTopOfStack( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline typename CapturedState::RseqState::Reader CapturedState::Reader::getRseqState() const {
  return typename CapturedState::RseqState::Reader(_reader);
}
inline typename CapturedState::RseqState::Builder CapturedState::Builder::getRseqState() {
  return typename CapturedState::RseqState::Builder(_builder);
}
#if !CAPNP_LITE
inline typename CapturedState::RseqState::Pipeline CapturedState::Pipeline::getRseqState() {
  return typename CapturedState::RseqState::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename CapturedState::RseqState::Builder CapturedState::Builder::initRseqState() {
  _builder.setDataField< ::uint64_t>(::capnp::bounded<9>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<20>() * ::capnp::ELEMENTS, 0);
  return typename CapturedState::RseqState::Builder(_builder);
}
inline  ::uint64_t CapturedState::Reader::getClonedFileDataOffset() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getClonedFileDataOffset() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setClonedFileDataOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline bool CapturedState::Reader::hasThreadLocals() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CapturedState::Builder::hasThreadLocals() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CapturedState::Reader::getThreadLocals() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CapturedState::Builder::getThreadLocals() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CapturedState::Builder::setThreadLocals( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CapturedState::Builder::initThreadLocals(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CapturedState::Builder::adoptThreadLocals(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CapturedState::Builder::disownThreadLocals() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int32_t CapturedState::Reader::getRecTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CapturedState::Builder::getRecTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setRecTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CapturedState::Reader::getOwnNamespaceRecTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CapturedState::Builder::getOwnNamespaceRecTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setOwnNamespaceRecTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CapturedState::Reader::getSerial() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CapturedState::Builder::getSerial() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setSerial( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline typename CapturedState::Tguid::Reader CapturedState::Reader::getTguid() const {
  return typename CapturedState::Tguid::Reader(_reader);
}
inline typename CapturedState::Tguid::Builder CapturedState::Builder::getTguid() {
  return typename CapturedState::Tguid::Builder(_builder);
}
#if !CAPNP_LITE
inline typename CapturedState::Tguid::Pipeline CapturedState::Pipeline::getTguid() {
  return typename CapturedState::Tguid::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename CapturedState::Tguid::Builder CapturedState::Builder::initTguid() {
  _builder.setDataField< ::uint32_t>(::capnp::bounded<26>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<27>() * ::capnp::ELEMENTS, 0);
  return typename CapturedState::Tguid::Builder(_builder);
}
inline  ::int32_t CapturedState::Reader::getDeschedFdChild() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CapturedState::Builder::getDeschedFdChild() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setDeschedFdChild( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CapturedState::Reader::getClonedFileDataFdChild() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CapturedState::Builder::getClonedFileDataFdChild() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setClonedFileDataFdChild( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline bool CapturedState::Reader::hasClonedFileDataFname() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CapturedState::Builder::hasClonedFileDataFname() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CapturedState::Reader::getClonedFileDataFname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CapturedState::Builder::getClonedFileDataFname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CapturedState::Builder::setClonedFileDataFname( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CapturedState::Builder::initClonedFileDataFname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CapturedState::Builder::adoptClonedFileDataFname(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CapturedState::Builder::disownClonedFileDataFname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int32_t CapturedState::Reader::getWaitStatus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CapturedState::Builder::getWaitStatus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setWaitStatus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CapturedState::Reader::getTlsRegister() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::Builder::getTlsRegister() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Builder::setTlsRegister( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool CapturedState::Reader::hasThreadAreas() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CapturedState::Builder::hasThreadAreas() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CapturedState::Reader::getThreadAreas() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CapturedState::Builder::getThreadAreas() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CapturedState::Builder::setThreadAreas( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CapturedState::Builder::initThreadAreas(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CapturedState::Builder::adoptThreadAreas(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CapturedState::Builder::disownThreadAreas() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint64_t CapturedState::RseqState::Reader::getPtr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedState::RseqState::Builder::getPtr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CapturedState::RseqState::Builder::setPtr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CapturedState::RseqState::Reader::getAbortPrefixSignature() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CapturedState::RseqState::Builder::getAbortPrefixSignature() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void CapturedState::RseqState::Builder::setAbortPrefixSignature( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t CapturedState::Tguid::Reader::getTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline  ::int32_t CapturedState::Tguid::Builder::getTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Tguid::Builder::setTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CapturedState::Tguid::Reader::getSerial() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CapturedState::Tguid::Builder::getSerial() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void CapturedState::Tguid::Builder::setSerial( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MemoryRange::Reader::getStart() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MemoryRange::Builder::getStart() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MemoryRange::Builder::setStart( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MemoryRange::Reader::getEnd() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MemoryRange::Builder::getEnd() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MemoryRange::Builder::setEnd( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool EmuFile::Reader::hasOrigPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EmuFile::Builder::hasOrigPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EmuFile::Reader::getOrigPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EmuFile::Builder::getOrigPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EmuFile::Builder::setOrigPath( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EmuFile::Builder::initOrigPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void EmuFile::Builder::adoptOrigPath(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EmuFile::Builder::disownOrigPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EmuFile::Reader::hasTmpPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EmuFile::Builder::hasTmpPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EmuFile::Reader::getTmpPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EmuFile::Builder::getTmpPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EmuFile::Builder::setTmpPath( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EmuFile::Builder::initTmpPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void EmuFile::Builder::adoptTmpPath(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EmuFile::Builder::disownTmpPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t EmuFile::Reader::getFile() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t EmuFile::Builder::getFile() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EmuFile::Builder::setFile( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EmuFile::Reader::getOwner() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EmuFile::Builder::getOwner() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EmuFile::Builder::setOwner( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EmuFile::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EmuFile::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EmuFile::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EmuFile::Reader::getDevice() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EmuFile::Builder::getDevice() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void EmuFile::Builder::setDevice( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t EmuFile::Reader::getInode() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t EmuFile::Builder::getInode() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void EmuFile::Builder::setInode( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Mapping::Reader::hasMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Mapping::Builder::hasMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::KernelMapping::Reader Mapping::Reader::getMap() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::rr::trace::KernelMapping::Builder Mapping::Builder::getMap() {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::KernelMapping::Pipeline Mapping::Pipeline::getMap() {
  return  ::rr::trace::KernelMapping::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Mapping::Builder::setMap( ::rr::trace::KernelMapping::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::KernelMapping::Builder Mapping::Builder::initMap() {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Mapping::Builder::adoptMap(
    ::capnp::Orphan< ::rr::trace::KernelMapping>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::KernelMapping> Mapping::Builder::disownMap() {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Mapping::Reader::hasRecordedMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Mapping::Builder::hasRecordedMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::KernelMapping::Reader Mapping::Reader::getRecordedMap() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::rr::trace::KernelMapping::Builder Mapping::Builder::getRecordedMap() {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::KernelMapping::Pipeline Mapping::Pipeline::getRecordedMap() {
  return  ::rr::trace::KernelMapping::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Mapping::Builder::setRecordedMap( ::rr::trace::KernelMapping::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::KernelMapping::Builder Mapping::Builder::initRecordedMap() {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Mapping::Builder::adoptRecordedMap(
    ::capnp::Orphan< ::rr::trace::KernelMapping>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::KernelMapping> Mapping::Builder::disownRecordedMap() {
  return ::capnp::_::PointerHelpers< ::rr::trace::KernelMapping>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t Mapping::Reader::getEmuFile() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Mapping::Builder::getEmuFile() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Mapping::Builder::setEmuFile( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Mapping::Reader::hasMappedFileState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Mapping::Builder::hasMappedFileState() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Mapping::Reader::getMappedFileState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Mapping::Builder::getMappedFileState() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Mapping::Builder::setMappedFileState( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Mapping::Builder::initMappedFileState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Mapping::Builder::adoptMappedFileState(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Mapping::Builder::disownMappedFileState() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t Mapping::Reader::getLocalAddress() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Mapping::Builder::getLocalAddress() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Mapping::Builder::setLocalAddress( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Mapping::Reader::getMonitoredSharedMemory() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Mapping::Builder::getMonitoredSharedMemory() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Mapping::Builder::setMonitoredSharedMemory( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Mapping::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Mapping::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Mapping::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool MemoryMapping::Reader::hasMemoryRange() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MemoryMapping::Builder::hasMemoryRange() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::MemoryRange::Reader MemoryMapping::Reader::getMemoryRange() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::rr::trace::MemoryRange::Builder MemoryMapping::Builder::getMemoryRange() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::MemoryRange::Pipeline MemoryMapping::Pipeline::getMemoryRange() {
  return  ::rr::trace::MemoryRange::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MemoryMapping::Builder::setMemoryRange( ::rr::trace::MemoryRange::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::MemoryRange::Builder MemoryMapping::Builder::initMemoryRange() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MemoryMapping::Builder::adoptMemoryRange(
    ::capnp::Orphan< ::rr::trace::MemoryRange>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::MemoryRange> MemoryMapping::Builder::disownMemoryRange() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryRange>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MemoryMapping::Reader::hasMapping() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MemoryMapping::Builder::hasMapping() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::Mapping::Reader MemoryMapping::Reader::getMapping() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::Mapping>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::rr::trace::Mapping::Builder MemoryMapping::Builder::getMapping() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Mapping>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::Mapping::Pipeline MemoryMapping::Pipeline::getMapping() {
  return  ::rr::trace::Mapping::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void MemoryMapping::Builder::setMapping( ::rr::trace::Mapping::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::Mapping>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::Mapping::Builder MemoryMapping::Builder::initMapping() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Mapping>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MemoryMapping::Builder::adoptMapping(
    ::capnp::Orphan< ::rr::trace::Mapping>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::Mapping>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::Mapping> MemoryMapping::Builder::disownMapping() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Mapping>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t ShmSegmentSize::Reader::getAddress() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ShmSegmentSize::Builder::getAddress() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ShmSegmentSize::Builder::setAddress( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ShmSegmentSize::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ShmSegmentSize::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ShmSegmentSize::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t VMem::Reader::getStart() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VMem::Builder::getStart() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VMem::Builder::setStart( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t VMem::Reader::getEnd() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t VMem::Builder::getEnd() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VMem::Builder::setEnd( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool VMem::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VMem::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader VMem::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder VMem::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VMem::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder VMem::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void VMem::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> VMem::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t AddressSpace::Reader::getBreakpoints() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AddressSpace::Builder::getBreakpoints() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setBreakpoints( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AddressSpace::Reader::hasExe() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasExe() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AddressSpace::Reader::getExe() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AddressSpace::Builder::getExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setExe( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AddressSpace::Builder::initExe(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptExe(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AddressSpace::Builder::disownExe() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t AddressSpace::Reader::getLeaderTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AddressSpace::Builder::getLeaderTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setLeaderTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AddressSpace::Reader::getLeaderSerial() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AddressSpace::Builder::getLeaderSerial() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setLeaderSerial( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AddressSpace::Reader::getExecCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AddressSpace::Builder::getExecCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setExecCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AddressSpace::Reader::getBrkStart() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getBrkStart() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setBrkStart( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AddressSpace::Reader::getBrkEnd() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getBrkEnd() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setBrkEnd( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AddressSpace::Reader::hasMem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasMem() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::MemoryMapping::Reader AddressSpace::Reader::getMem() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryMapping>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::rr::trace::MemoryMapping::Builder AddressSpace::Builder::getMem() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryMapping>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::MemoryMapping::Pipeline AddressSpace::Pipeline::getMem() {
  return  ::rr::trace::MemoryMapping::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AddressSpace::Builder::setMem( ::rr::trace::MemoryMapping::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::MemoryMapping>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::MemoryMapping::Builder AddressSpace::Builder::initMem() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryMapping>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::adoptMem(
    ::capnp::Orphan< ::rr::trace::MemoryMapping>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::MemoryMapping>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::MemoryMapping> AddressSpace::Builder::disownMem() {
  return ::capnp::_::PointerHelpers< ::rr::trace::MemoryMapping>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AddressSpace::Reader::hasShmSizes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasShmSizes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Reader AddressSpace::Reader::getShmSizes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Builder AddressSpace::Builder::getShmSizes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setShmSizes( ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>::Builder AddressSpace::Builder::initShmSizes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptShmSizes(
    ::capnp::Orphan< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>> AddressSpace::Builder::disownShmSizes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ShmSegmentSize,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AddressSpace::Reader::hasMonitoredMem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasMonitoredMem() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader AddressSpace::Reader::getMonitoredMem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AddressSpace::Builder::getMonitoredMem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setMonitoredMem( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void AddressSpace::Builder::setMonitoredMem(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AddressSpace::Builder::initMonitoredMem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptMonitoredMem(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> AddressSpace::Builder::disownMonitoredMem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool AddressSpace::Reader::hasDontFork() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasDontFork() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader AddressSpace::Reader::getDontFork() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder AddressSpace::Builder::getDontFork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setDontFork( ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder AddressSpace::Builder::initDontFork(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptDontFork(
    ::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>> AddressSpace::Builder::disownDontFork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AddressSpace::Reader::hasWipeOnFork() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasWipeOnFork() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader AddressSpace::Reader::getWipeOnFork() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder AddressSpace::Builder::getWipeOnFork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setWipeOnFork( ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>::Builder AddressSpace::Builder::initWipeOnFork(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptWipeOnFork(
    ::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>> AddressSpace::Builder::disownWipeOnFork() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::MemoryRange,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline typename AddressSpace::ThreadLocalsTuid::Reader AddressSpace::Reader::getThreadLocalsTuid() const {
  return typename AddressSpace::ThreadLocalsTuid::Reader(_reader);
}
inline typename AddressSpace::ThreadLocalsTuid::Builder AddressSpace::Builder::getThreadLocalsTuid() {
  return typename AddressSpace::ThreadLocalsTuid::Builder(_builder);
}
#if !CAPNP_LITE
inline typename AddressSpace::ThreadLocalsTuid::Pipeline AddressSpace::Pipeline::getThreadLocalsTuid() {
  return typename AddressSpace::ThreadLocalsTuid::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename AddressSpace::ThreadLocalsTuid::Builder AddressSpace::Builder::initThreadLocalsTuid() {
  _builder.setDataField< ::uint32_t>(::capnp::bounded<8>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<9>() * ::capnp::ELEMENTS, 0);
  return typename AddressSpace::ThreadLocalsTuid::Builder(_builder);
}
inline  ::uint64_t AddressSpace::Reader::getVdsoStartAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getVdsoStartAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setVdsoStartAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AddressSpace::Reader::getWatchpoints() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AddressSpace::Builder::getWatchpoints() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setWatchpoints( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AddressSpace::Reader::getSavedWatchpoints() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AddressSpace::Builder::getSavedWatchpoints() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setSavedWatchpoints( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AddressSpace::Reader::getChildMemFd() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AddressSpace::Builder::getChildMemFd() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setChildMemFd( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AddressSpace::Reader::getTracedSyscalIp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getTracedSyscalIp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setTracedSyscalIp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AddressSpace::Reader::getPrivilegedTracedSyscallIp() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getPrivilegedTracedSyscallIp() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setPrivilegedTracedSyscallIp( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool AddressSpace::Reader::getSycallbufEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}

inline bool AddressSpace::Builder::getSycallbufEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setSycallbufEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<480>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AddressSpace::Reader::getDoBreakpointFaultAddr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getDoBreakpointFaultAddr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setDoBreakpointFaultAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AddressSpace::Reader::getStoppingBreakpointTable() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getStoppingBreakpointTable() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setStoppingBreakpointTable( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AddressSpace::Reader::getStoppingBreakpointTableEntrySize() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AddressSpace::Builder::getStoppingBreakpointTableEntrySize() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setStoppingBreakpointTableEntrySize( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline bool AddressSpace::Reader::hasSavedAuxv() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasSavedAuxv() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AddressSpace::Reader::getSavedAuxv() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AddressSpace::Builder::getSavedAuxv() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setSavedAuxv( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AddressSpace::Builder::initSavedAuxv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptSavedAuxv(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AddressSpace::Builder::disownSavedAuxv() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint64_t AddressSpace::Reader::getSavedInterpreterBase() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpace::Builder::getSavedInterpreterBase() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setSavedInterpreterBase( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline bool AddressSpace::Reader::hasSavedLdPath() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasSavedLdPath() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AddressSpace::Reader::getSavedLdPath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AddressSpace::Builder::getSavedLdPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setSavedLdPath( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AddressSpace::Builder::initSavedLdPath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptSavedLdPath(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AddressSpace::Builder::disownSavedLdPath() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::int64_t AddressSpace::Reader::getFirstRunEvent() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AddressSpace::Builder::getFirstRunEvent() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::Builder::setFirstRunEvent( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool AddressSpace::Reader::hasStapSemaphores() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasStapSemaphores() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader AddressSpace::Reader::getStapSemaphores() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AddressSpace::Builder::getStapSemaphores() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setStapSemaphores( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void AddressSpace::Builder::setStapSemaphores(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AddressSpace::Builder::initStapSemaphores(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptStapSemaphores(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> AddressSpace::Builder::disownStapSemaphores() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool AddressSpace::Reader::hasPrname() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasPrname() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader AddressSpace::Reader::getPrname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder AddressSpace::Builder::getPrname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setPrname( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder AddressSpace::Builder::initPrname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptPrname(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> AddressSpace::Builder::disownPrname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool AddressSpace::Reader::hasTasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpace::Builder::hasTasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader AddressSpace::Reader::getTasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AddressSpace::Builder::getTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void AddressSpace::Builder::setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void AddressSpace::Builder::setTasks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder AddressSpace::Builder::initTasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void AddressSpace::Builder::adoptTasks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> AddressSpace::Builder::disownTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline  ::int32_t AddressSpace::ThreadLocalsTuid::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AddressSpace::ThreadLocalsTuid::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::ThreadLocalsTuid::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AddressSpace::ThreadLocalsTuid::Reader::getSerial() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AddressSpace::ThreadLocalsTuid::Builder::getSerial() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void AddressSpace::ThreadLocalsTuid::Builder::setSerial( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool FdTable::Reader::hasFds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FdTable::Builder::hasFds() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader FdTable::Reader::getFds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder FdTable::Builder::getFds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FdTable::Builder::setFds( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void FdTable::Builder::setFds(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder FdTable::Builder::initFds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FdTable::Builder::adoptFds(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> FdTable::Builder::disownFds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t FdTable::Reader::getFdCountBeyondLimit() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FdTable::Builder::getFdCountBeyondLimit() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FdTable::Builder::setFdCountBeyondLimit( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FdTable::Reader::hasTasks() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FdTable::Builder::hasTasks() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader FdTable::Reader::getTasks() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder FdTable::Builder::getTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FdTable::Builder::setTasks( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void FdTable::Builder::setTasks(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder FdTable::Builder::initTasks(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FdTable::Builder::adoptTasks(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> FdTable::Builder::disownTasks() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int64_t PerfCounters::Reader::getCountingPeriod() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t PerfCounters::Builder::getCountingPeriod() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setCountingPeriod( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getPmuIndex() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getPmuIndex() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setPmuIndex( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getFdTicksMeasure() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getFdTicksMeasure() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setFdTicksMeasure( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getFdMinusTicksMeasure() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getFdMinusTicksMeasure() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setFdMinusTicksMeasure( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getFdTicksInterrupt() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getFdTicksInterrupt() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setFdTicksInterrupt( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getFdUselessCounter() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getFdUselessCounter() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setFdUselessCounter( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getFdTicksInTransaction() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getFdTicksInTransaction() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setFdTicksInTransaction( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerfCounters::Reader::getFdStretchCounter() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PerfCounters::Builder::getFdStretchCounter() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setFdStretchCounter( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::rr::trace::TicksSemantics PerfCounters::Reader::getTicksSemantics() const {
  return _reader.getDataField< ::rr::trace::TicksSemantics>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::rr::trace::TicksSemantics PerfCounters::Builder::getTicksSemantics() {
  return _builder.getDataField< ::rr::trace::TicksSemantics>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setTicksSemantics( ::rr::trace::TicksSemantics value) {
  _builder.setDataField< ::rr::trace::TicksSemantics>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool PerfCounters::Reader::getStart() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<336>() * ::capnp::ELEMENTS);
}

inline bool PerfCounters::Builder::getStart() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<336>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setStart(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<336>() * ::capnp::ELEMENTS, value);
}

inline bool PerfCounters::Reader::getCounting() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<337>() * ::capnp::ELEMENTS);
}

inline bool PerfCounters::Builder::getCounting() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<337>() * ::capnp::ELEMENTS);
}
inline void PerfCounters::Builder::setCounting(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<337>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getScratchPtr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getScratchPtr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setScratchPtr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getScratchSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getScratchSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setScratchSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Task::Reader::getDeschedFdChild() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getDeschedFdChild() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setDeschedFdChild( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Task::Reader::getClonedFileDataFdChild() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getClonedFileDataFdChild() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setClonedFileDataFdChild( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasClonedFileDataFname() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasClonedFileDataFname() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Task::Reader::getClonedFileDataFname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Task::Builder::getClonedFileDataFname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Task::Builder::setClonedFileDataFname( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Task::Builder::initClonedFileDataFname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptClonedFileDataFname(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Task::Builder::disownClonedFileDataFname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Task::RseqState::Reader Task::Reader::getRseqState() const {
  return typename Task::RseqState::Reader(_reader);
}
inline typename Task::RseqState::Builder Task::Builder::getRseqState() {
  return typename Task::RseqState::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Task::RseqState::Pipeline Task::Pipeline::getRseqState() {
  return typename Task::RseqState::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Task::RseqState::Builder Task::Builder::initRseqState() {
  _builder.setDataField< ::uint64_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<8>() * ::capnp::ELEMENTS, 0);
  return typename Task::RseqState::Builder(_builder);
}
inline bool Task::Reader::hasHpc() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasHpc() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::PerfCounters::Reader Task::Reader::getHpc() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::PerfCounters>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::rr::trace::PerfCounters::Builder Task::Builder::getHpc() {
  return ::capnp::_::PointerHelpers< ::rr::trace::PerfCounters>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::PerfCounters::Pipeline Task::Pipeline::getHpc() {
  return  ::rr::trace::PerfCounters::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setHpc( ::rr::trace::PerfCounters::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::PerfCounters>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::PerfCounters::Builder Task::Builder::initHpc() {
  return ::capnp::_::PointerHelpers< ::rr::trace::PerfCounters>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptHpc(
    ::capnp::Orphan< ::rr::trace::PerfCounters>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::PerfCounters>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::PerfCounters> Task::Builder::disownHpc() {
  return ::capnp::_::PointerHelpers< ::rr::trace::PerfCounters>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t Task::Reader::getTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Task::Reader::getRecTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getRecTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setRecTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Task::Reader::getOwnNamespaceRecTid() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getOwnNamespaceRecTid() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setOwnNamespaceRecTid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getSyscallbufSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getSyscallbufSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setSyscallbufSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getSyscallbufChild() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getSyscallbufChild() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setSyscallbufChild( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getPreloadGlobals() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getPreloadGlobals() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setPreloadGlobals( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasThreadLocals() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasThreadLocals() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Task::Reader::getThreadLocals() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Task::Builder::getThreadLocals() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Task::Builder::setThreadLocals( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Task::Builder::initThreadLocals(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptThreadLocals(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Task::Builder::disownThreadLocals() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t Task::Reader::getSerial() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Task::Builder::getSerial() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setSerial( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasAs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasAs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::AddressSpace::Reader Task::Reader::getAs() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::AddressSpace>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::rr::trace::AddressSpace::Builder Task::Builder::getAs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::AddressSpace>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::AddressSpace::Pipeline Task::Pipeline::getAs() {
  return  ::rr::trace::AddressSpace::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setAs( ::rr::trace::AddressSpace::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::AddressSpace>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::AddressSpace::Builder Task::Builder::initAs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::AddressSpace>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptAs(
    ::capnp::Orphan< ::rr::trace::AddressSpace>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::AddressSpace>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::AddressSpace> Task::Builder::disownAs() {
  return ::capnp::_::PointerHelpers< ::rr::trace::AddressSpace>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasFds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasFds() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::FdTable::Reader Task::Reader::getFds() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::rr::trace::FdTable::Builder Task::Builder::getFds() {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::FdTable::Pipeline Task::Pipeline::getFds() {
  return  ::rr::trace::FdTable::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setFds( ::rr::trace::FdTable::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::FdTable::Builder Task::Builder::initFds() {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptFds(
    ::capnp::Orphan< ::rr::trace::FdTable>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::FdTable> Task::Builder::disownFds() {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasPrname() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasPrname() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Task::Reader::getPrname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Task::Builder::getPrname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Task::Builder::setPrname( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Task::Builder::initPrname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptPrname(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Task::Builder::disownPrname() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int64_t Task::Reader::getTicks() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Task::Builder::getTicks() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setTicks( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasRegisters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasRegisters() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::Registers::Reader Task::Reader::getRegisters() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::rr::trace::Registers::Builder Task::Builder::getRegisters() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::Registers::Pipeline Task::Pipeline::getRegisters() {
  return  ::rr::trace::Registers::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setRegisters( ::rr::trace::Registers::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::Registers>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::Registers::Builder Task::Builder::initRegisters() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptRegisters(
    ::capnp::Orphan< ::rr::trace::Registers>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::Registers>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::Registers> Task::Builder::disownRegisters() {
  return ::capnp::_::PointerHelpers< ::rr::trace::Registers>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::uint64_t Task::Reader::getAddressOfLastExecutionResume() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getAddressOfLastExecutionResume() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setAddressOfLastExecutionResume( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Task::Reader::getHowLastExecutionResumed() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getHowLastExecutionResumed() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setHowLastExecutionResumed( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getLastResumeOrigCx() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getLastResumeOrigCx() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setLastResumeOrigCx( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline  ::rr::trace::TrappedInstruction Task::Reader::getSinglesteppingInstruction() const {
  return _reader.getDataField< ::rr::trace::TrappedInstruction>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}

inline  ::rr::trace::TrappedInstruction Task::Builder::getSinglesteppingInstruction() {
  return _builder.getDataField< ::rr::trace::TrappedInstruction>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setSinglesteppingInstruction( ::rr::trace::TrappedInstruction value) {
  _builder.setDataField< ::rr::trace::TrappedInstruction>(
      ::capnp::bounded<52>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getDidSetBreakpointAfterCpuid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<848>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getDidSetBreakpointAfterCpuid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<848>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setDidSetBreakpointAfterCpuid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<848>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getIsStopped() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<849>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getIsStopped() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<849>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setIsStopped(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<849>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getSeccompBpfEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<850>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getSeccompBpfEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<850>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setSeccompBpfEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<850>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getDetectedUnexpectedExit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<851>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getDetectedUnexpectedExit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<851>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setDetectedUnexpectedExit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<851>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getRegistersDirty() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<852>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getRegistersDirty() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<852>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setRegistersDirty(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<852>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getOrigSyscallnoDirty() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<853>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getOrigSyscallnoDirty() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<853>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setOrigSyscallnoDirty(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<853>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasExtraRegisters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasExtraRegisters() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::ExtraRegisters::Reader Task::Reader::getExtraRegisters() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::rr::trace::ExtraRegisters::Builder Task::Builder::getExtraRegisters() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::ExtraRegisters::Pipeline Task::Pipeline::getExtraRegisters() {
  return  ::rr::trace::ExtraRegisters::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setExtraRegisters( ::rr::trace::ExtraRegisters::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::ExtraRegisters::Builder Task::Builder::initExtraRegisters() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptExtraRegisters(
    ::capnp::Orphan< ::rr::trace::ExtraRegisters>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::ExtraRegisters> Task::Builder::disownExtraRegisters() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ExtraRegisters>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Task::Reader::getExtraRegistersKnown() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<854>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getExtraRegistersKnown() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<854>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setExtraRegistersKnown(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<854>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasTg() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasTg() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::ThreadGroup::Reader Task::Reader::getTg() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::ThreadGroup>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::rr::trace::ThreadGroup::Builder Task::Builder::getTg() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ThreadGroup>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::ThreadGroup::Pipeline Task::Pipeline::getTg() {
  return  ::rr::trace::ThreadGroup::Pipeline(_typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Task::Builder::setTg( ::rr::trace::ThreadGroup::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ThreadGroup>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::ThreadGroup::Builder Task::Builder::initTg() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ThreadGroup>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Task::Builder::adoptTg(
    ::capnp::Orphan< ::rr::trace::ThreadGroup>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ThreadGroup>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::ThreadGroup> Task::Builder::disownTg() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ThreadGroup>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Task::Reader::hasThreadAreas() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasThreadAreas() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader Task::Reader::getThreadAreas() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder Task::Builder::getThreadAreas() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Task::Builder::setThreadAreas( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void Task::Builder::setThreadAreas(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder Task::Builder::initThreadAreas(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptThreadAreas(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> Task::Builder::disownThreadAreas() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline  ::uint64_t Task::Reader::getTopOfStack() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getTopOfStack() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setTopOfStack( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Task::Reader::getWaitStatus() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getWaitStatus() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setWaitStatus( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::hasPendingSiginfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Task::Builder::hasPendingSiginfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Task::Reader::getPendingSiginfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Task::Builder::getPendingSiginfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Task::Builder::setPendingSiginfo( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Task::Builder::initPendingSiginfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Task::Builder::adoptPendingSiginfo(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Task::Builder::disownPendingSiginfo() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Task::Reader::getSeenPtraceExitEvent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<855>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getSeenPtraceExitEvent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<855>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setSeenPtraceExitEvent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<855>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getHandledPtraceExitEvent() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<856>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getHandledPtraceExitEvent() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<856>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setHandledPtraceExitEvent(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<856>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Task::Reader::getExpectingPtraceInterruptStop() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Task::Builder::getExpectingPtraceInterruptStop() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setExpectingPtraceInterruptStop( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getWasReaped() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<857>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getWasReaped() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<857>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setWasReaped(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<857>() * ::capnp::ELEMENTS, value);
}

inline bool Task::Reader::getForgotten() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<858>() * ::capnp::ELEMENTS);
}

inline bool Task::Builder::getForgotten() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<858>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setForgotten(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<858>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::Reader::getSelfReferenceValue() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::Builder::getSelfReferenceValue() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Task::Builder::setSelfReferenceValue( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Task::RseqState::Reader::getPtr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Task::RseqState::Builder::getPtr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Task::RseqState::Builder::setPtr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Task::RseqState::Reader::getAbortPrefixSignature() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Task::RseqState::Builder::getAbortPrefixSignature() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Task::RseqState::Builder::setAbortPrefixSignature( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ClonedFd::Reader::getPtr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ClonedFd::Builder::getPtr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ClonedFd::Builder::setPtr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ClonedFd::Reader::hasFdTablePtr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ClonedFd::Builder::hasFdTablePtr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::FdTable::Reader ClonedFd::Reader::getFdTablePtr() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::rr::trace::FdTable::Builder ClonedFd::Builder::getFdTablePtr() {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::FdTable::Pipeline ClonedFd::Pipeline::getFdTablePtr() {
  return  ::rr::trace::FdTable::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ClonedFd::Builder::setFdTablePtr( ::rr::trace::FdTable::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::FdTable::Builder ClonedFd::Builder::initFdTablePtr() {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ClonedFd::Builder::adoptFdTablePtr(
    ::capnp::Orphan< ::rr::trace::FdTable>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::FdTable> ClonedFd::Builder::disownFdTablePtr() {
  return ::capnp::_::PointerHelpers< ::rr::trace::FdTable>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ClonedFd::Reader::hasTaskSet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ClonedFd::Builder::hasTaskSet() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader ClonedFd::Reader::getTaskSet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ClonedFd::Builder::getTaskSet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ClonedFd::Builder::setTaskSet( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ClonedFd::Builder::setTaskSet(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ClonedFd::Builder::initTaskSet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ClonedFd::Builder::adoptTaskSet(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> ClonedFd::Builder::disownTaskSet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t CapturedMemory::Reader::getPtr() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CapturedMemory::Builder::getPtr() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CapturedMemory::Builder::setPtr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CapturedMemory::Reader::hasBuf() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CapturedMemory::Builder::hasBuf() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader CapturedMemory::Reader::getBuf() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder CapturedMemory::Builder::getBuf() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CapturedMemory::Builder::setBuf( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder CapturedMemory::Builder::initBuf(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CapturedMemory::Builder::adoptBuf(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> CapturedMemory::Builder::disownBuf() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t AddressSpaceClone::Reader::getCloneLeader() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AddressSpaceClone::Builder::getCloneLeader() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AddressSpaceClone::Builder::setCloneLeader( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AddressSpaceClone::Reader::hasCloneLeaderState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpaceClone::Builder::hasCloneLeaderState() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::CapturedState::Reader AddressSpaceClone::Reader::getCloneLeaderState() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::CapturedState>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::rr::trace::CapturedState::Builder AddressSpaceClone::Builder::getCloneLeaderState() {
  return ::capnp::_::PointerHelpers< ::rr::trace::CapturedState>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::CapturedState::Pipeline AddressSpaceClone::Pipeline::getCloneLeaderState() {
  return  ::rr::trace::CapturedState::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AddressSpaceClone::Builder::setCloneLeaderState( ::rr::trace::CapturedState::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::CapturedState>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::CapturedState::Builder AddressSpaceClone::Builder::initCloneLeaderState() {
  return ::capnp::_::PointerHelpers< ::rr::trace::CapturedState>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AddressSpaceClone::Builder::adoptCloneLeaderState(
    ::capnp::Orphan< ::rr::trace::CapturedState>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::CapturedState>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::CapturedState> AddressSpaceClone::Builder::disownCloneLeaderState() {
  return ::capnp::_::PointerHelpers< ::rr::trace::CapturedState>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AddressSpaceClone::Reader::hasMemberStates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpaceClone::Builder::hasMemberStates() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Reader AddressSpaceClone::Reader::getMemberStates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Builder AddressSpaceClone::Builder::getMemberStates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AddressSpaceClone::Builder::setMemberStates( ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>::Builder AddressSpaceClone::Builder::initMemberStates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AddressSpaceClone::Builder::adoptMemberStates(
    ::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>> AddressSpaceClone::Builder::disownMemberStates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedState,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AddressSpaceClone::Reader::hasCapturedMemory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AddressSpaceClone::Builder::hasCapturedMemory() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Reader AddressSpaceClone::Reader::getCapturedMemory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Builder AddressSpaceClone::Builder::getCapturedMemory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AddressSpaceClone::Builder::setCapturedMemory( ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>::Builder AddressSpaceClone::Builder::initCapturedMemory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void AddressSpaceClone::Builder::adoptCapturedMemory(
    ::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>> AddressSpaceClone::Builder::disownCapturedMemory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::CapturedMemory,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t ReadersPosition::Reader::getEvents() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ReadersPosition::Builder::getEvents() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReadersPosition::Builder::setEvents( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ReadersPosition::Reader::getRawData() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ReadersPosition::Builder::getRawData() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ReadersPosition::Builder::setRawData( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ReadersPosition::Reader::getMmaps() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ReadersPosition::Builder::getMmaps() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ReadersPosition::Builder::setMmaps( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ReadersPosition::Reader::getTasks() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ReadersPosition::Builder::getTasks() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ReadersPosition::Builder::setTasks( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool CloneCompletion::Reader::hasAddressSpaces() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CloneCompletion::Builder::hasAddressSpaces() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Reader CloneCompletion::Reader::getAddressSpaces() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Builder CloneCompletion::Builder::getAddressSpaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CloneCompletion::Builder::setAddressSpaces( ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>::Builder CloneCompletion::Builder::initAddressSpaces(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CloneCompletion::Builder::adoptAddressSpaces(
    ::capnp::Orphan< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>> CloneCompletion::Builder::disownAddressSpaces() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::AddressSpaceClone,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CloneCompletion::Reader::hasClonedFdTables() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CloneCompletion::Builder::hasClonedFdTables() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Reader CloneCompletion::Reader::getClonedFdTables() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Builder CloneCompletion::Builder::getClonedFdTables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CloneCompletion::Builder::setClonedFdTables( ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>::Builder CloneCompletion::Builder::initClonedFdTables(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CloneCompletion::Builder::adoptClonedFdTables(
    ::capnp::Orphan< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>> CloneCompletion::Builder::disownClonedFdTables() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::rr::trace::ClonedFd,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CloneCompletion::Reader::hasReadersPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CloneCompletion::Builder::hasReadersPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::rr::trace::ReadersPosition::Reader CloneCompletion::Reader::getReadersPosition() const {
  return ::capnp::_::PointerHelpers< ::rr::trace::ReadersPosition>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::rr::trace::ReadersPosition::Builder CloneCompletion::Builder::getReadersPosition() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ReadersPosition>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rr::trace::ReadersPosition::Pipeline CloneCompletion::Pipeline::getReadersPosition() {
  return  ::rr::trace::ReadersPosition::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void CloneCompletion::Builder::setReadersPosition( ::rr::trace::ReadersPosition::Reader value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ReadersPosition>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::rr::trace::ReadersPosition::Builder CloneCompletion::Builder::initReadersPosition() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ReadersPosition>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CloneCompletion::Builder::adoptReadersPosition(
    ::capnp::Orphan< ::rr::trace::ReadersPosition>&& value) {
  ::capnp::_::PointerHelpers< ::rr::trace::ReadersPosition>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rr::trace::ReadersPosition> CloneCompletion::Builder::disownReadersPosition() {
  return ::capnp::_::PointerHelpers< ::rr::trace::ReadersPosition>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

